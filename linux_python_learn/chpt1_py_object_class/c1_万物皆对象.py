#! python
#coding=utf-8



'''
python 中的类与对象
python 中的 类 和 函数 都为模板, 当类与函数被引用是, 系统会根据模板创建对应的对象
python中, 万事万物皆为对象, 且python比java面向对象的更加彻底,(python中, 类和函数可以为对象, 而java中方法(函数)不能为对象)


作为对象, 类和函数有以下权利:
1. 可以添加到集合对象中去
2. 可以作为参数传递
3. 可以当做函数的返回值
'''

# 函数为对象
def test_def():
    print('该函数是个对象')

# 测试
# 可以看到函数test_def作为对象赋值给变量x, 说明python函数也可作为对象
x = test_def
x()

######################################################################################

# 类为对象
class test_cls(object):
    def __init__(self):
        print('该类是个对象')
#测试2
x2 = test_cls
x2()

#######################################################################################

# 类和函数被添加到集合的例子
# 返回结果, 为什么list中只有两个元素, 会循环4个元素呢?
# 因为当class 对象在list中, list会返回该类的编译结果(__init__), 且会返回该类的实例(即main object)
# 当 def 对象在list中时, list会返回该类的编译结果(例如打印结果), 且会返回该函数的返回值, 本函数没有返回值所以为None

# 该类是个对象
# <__main__.test_cls object at 0x000001958E1A03C8>
# 该函数是个对象
# None

for item in [test_cls, test_def]:
    print(item())

######################################################################################

# 类与函数作为返回对象的例子 (装饰器原理)
# 函数内部返回函数
def test_decorate():
    print('测试装饰器')
    def test_def():
        print('装饰器内部')
    return test_def()
# 测试
x3 = test_decorate
x3()




